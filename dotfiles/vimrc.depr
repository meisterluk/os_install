" meisterluk's .vimrc
" ===================
"
" :date:     10.02.17
" :author:   Lukas Prokop <admin@lukas-prokop.at>
" :license:  BSD
" :created:  using vim ;)
"
" ABBREVIATIONS
" -------------
"
" BS = Backspace
" EOL = End of Line
"
" PLUGINS TO LOOK FOR
" -------------------
"
" * SnippetsEmu
" * pida
" * emacsmode
" * BicycleRepairMan
" * SuperTab
" * project
" * taglist
"
" TODO
" ----
"
" * insert common startinfo for text files
" * mapping: insert three-dot-date-format
" * Vim-Makro: ü zu \"u, ü zu &uuml;
" * Vim-Makro: Innen zu männlich (Ungarin -> Ungar)
" * Vim-Makro: Tabtabelle zu HTML-Tabelle
" * if dirname "data/$": set ff=unix
" * if filename "TODO": set syntax=rst
" * support py-template-engines Mako, Jinja, Django, Python Server Pages
" * map @python: add modline at last line if not set
" * map @python: add shebang at first line if not set
"       au BufEnter *.sh if getline(1) == "" | :call setline(1, "#!/bin/sh") | endif
"       au BufEnter *.py if getline(1) == "" | :call setline(1, "#!/usr/bin/env python") | endif
"       " Python header
"       function! <SID>PythonHeader()
"         :call setline(1, "#! /bin/sh")
"         :call append(1, "# vim: filetype=python")
"         :call append(2, "\"\"\":\"")
"         :call append(3, "exec python $0 ${1+\"$@\"}")
"         :call append(4, "\"\"\"")
"         :call append(5, "")
"         exe 6
"       endfunction
"       au BufEnter *.py if getline(1) == "" | call s:PythonHeader() | endif
"
"
" SETTINGS
" --------

" GENERAL {{{

colorscheme ron # evening murphy

" reset everything to make everything logical.
" TODO: don't know any command
" hi clear
" if exists("syntax_on")
"     syntax reset
" endif


" a few variables
let g:system = "linux"

" set default script encoding.
" [not needed when file starts with a BOM.]
scriptencoding utf-8
"set encoding=utf-8 " prefer UTF-8 but do not crash modified files

" remember 50 lines of VIM command history
set history=50

" use filetype plugin
filetype plugin on
filetype indent off " I want autoindent and no filetype-specific indent

" 'ar': reload file if somebody edits file outside
set autoread

" don't use compatible mode
set nocompatible

" import other vimrc files
runtime! ~/.vim/*rc.vim ~/syntax/**/*

" will be replaced in insert mode [case-sensitive]
iabbr GvR Guido van Rossum
" TODO: don't know how to escape characters
"ab $py python 

" :help digraphs
set nodigraph

" 'ai': Keep indentation level, when starting new line
" 'si': vim thinks about whitespace conventions automatically
set autoindent nosmartindent

" I don't like tabs.
" 'et': Expand tabs
" 'ts': ... to 4 spaces
" TODO: not for makefiles and other formats
set expandtab tabstop=4
" retab " auto-replace tabs is too hard

" Treat 4 spaces as tab. length(    <BS>) == 0
set smarttab

" Show line numbers
set number

" Tabstop for smartindent
set shiftwidth=4

" 'bs': Backspace over indentations, EOLs and start like text
set backspace=2 " equals "set backspace=indent,eol,start"

" 'ww': :help whichwrap
set whichwrap=<,>

" auto-break after 80 characters
" TODO: only in python!
"set wrapmargin=80 textwidth=80 formatexpr=<br>

" show (partial) command in the last line of the screen
set showcmd

" display line information in last line
set ruler

" do not change file permissions
set backupcopy=yes

" do not write backup file
set nobackup

" Even though... set backup file directory
set backupdir=~/.vim/backups

" Write swapfile
set swapfile

" Use current directory for swapfile
set dir=.

" limit viminfo buffer to save startup time
set viminfo='20,<50,s10"

" make whitespaces visible by showing characters
set list

" eol, tab, trail, extends and precedes
set listchars=tab:»·,trail:· ",eol:&

" reload vimrc if it's edited
autocmd! bufwritepost vimrc source ~/.vimrc

" search for tag files in tags/ and folder above
set tags=tags;..
" }}}

" KEYBOARD {{{
" , is now a special key. ",w" will save the current file.
" <Leader> is now "," in map-commands.
let mapleader = ","
let g:mapleader = ","

" mapping keyboard keys to commands
" TODO: replace <F2> with the Menu Key
" TODO: insert vim-modline
"" Append modeline after last line in buffer.
"" Use substitute() (not printf()) to handle '%%s' modeline in LaTeX files.
" function! AppendModeline()
"  let save_cursor = getpos('.')
"  let append = ' vim: set ts='.&tabstop.' sw='.&shiftwidth.' tw='.&textwidth.': '
"  $put =substitute(&commentstring, '%s', append, '')
"  call setpos('.', save_cursor)
" endfunction
" nnoremap <silent> <Leader>ml :call AppendModeline()<CR>
map! <F2>a ä
map! <F2>o ö
map! <F2>u ü
map! <F2>s ß
map <C-s> :w<CR> " TODO: does not occur?!

" TODO: delete all C style comments
" :%s!/\*\_.\{-}\*/!!g

" }}}

" GUI, Appearance {{{
" keep 6 lines below + above visible when selecting line
set so=6

" :help wildmenu
set wildmenu

" commandbar height
set cmdheight=1

" 'hid': Unloaded buffer, if abandoned
set hidden

" font family
"set guifont=Georgia\ 10 " TODO iiiih
" }}}

" SEARCHING AND REGEX {{{
" 'is': Start search while typing keyword
" 'hls': Highlight all search matches
set incsearch
" if terminal has Colors or GUI is running, run syntax highlightning
if &t_Co > 2 || has("gui_running")
    set hlsearch 
endif

" 'ic': ignore case when searching
set ignorecase

" '/magic': magic=on. Special regex characters have special meanings
set magic

" jump to other symbol when inserting character
" 'sm': Keep different background color for search matches
" 'mat': How many tenths of a second to blink
" 'mps': TODO
set showmatch matchtime=4 matchpairs=(:),{:},[:]
"set matchpairs=(:),{:},[:],<:> 
" TODO: previous command only for HTML

" }}}

" SOUNDS {{{
" simply turn off all sounds
set noerrorbells
set novisualbell
set t_vb=

" }}}

" SYNTAX {{{
" Syntax highlightning enable
if &t_Co > 2 || has("gui_running")
    syntax enable
endif

" Highlight regions in text file
"
" eg. highlight Comment ctermfg=green
" TODO
" :set background=[dark|light] "Tell vim about your background color 
" :syntax on " Enable syntax highlighting. 
" :help html.vim

" }}}

" FILETYPE SPECIFIC {{{
" You might want to export these lines to
" .vim/ftplugin/%(filetype)s.vim

" autocmd BufNewFile,BufRead ~/progs/svn/*.py retab 2 | set shiftwidth=2

" C specific
" TODO: linewidth=max 72
" TODO: no tabs! tabwidth=4 spaces
autocmd FileType c setlocal cindent shiftwidth=2 tabstop=2 et si

" python specific
autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4

" Makefile specific
autocmd FileType Makefile setlocal noexpandtab shiftwidth=4

" Java specific
"autocmd Filetype java syntax on

" LaTeX specific
autocmd FileType tex setlocal textwidth=80
autocmd BufEnter *.tex set tabstop=2

" ASM sepcific
autocmd FileType asm setlocal nosmartindent noautoindent noexpandtab listchars=tab:__

" C++ specific
autocmd FileType cpp setlocal expandtab shiftwidth=2 tabstop=2

" PHP specific
autocmd FileType php setlocal smartindent et

" Java specific
"autocmd Filetype java syntax on

" LaTeX specific
autocmd FileType tex setlocal tabstop=2 textwidth=76

" Vierlog specific
autocmd FileType verilog setlocal shiftwidth=2 tabstop=2 expandtab
" }}}






" " When started as "evim", evim.vim will already have done these settings.
" if v:progname =~? "evim"
"   finish
" endif
" 
" " Use Vim settings, rather than Vi settings (much better!).
" " This must be first, because it changes other options as a side effect.
" set nocompatible
" 
" if has("vms")
"   set nobackup		" do not keep a backup file, use versions instead
" else
"   set backup		" keep a backup file
" endif
" set showcmd		" display incomplete commands
" set incsearch		" do incremental searching
" 
" " For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" " let &guioptions = substitute(&guioptions, "t", "", "g")
" 
" " Don't use Ex mode, use Q for formatting
" map Q gq
" 
" " CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" " so that you can undo CTRL-U after inserting a line break.
" inoremap <C-U> <C-G>u<C-U>
" 
" " In many terminal emulators the mouse works just fine, thus enable it.
" if has('mouse')
"   set mouse=a
" endif
" 
" " Switch syntax highlighting on, when the terminal has colors
" " Also switch on highlighting the last used search pattern.
" if &t_Co > 2 || has("gui_running")
"   syntax on
"   set hlsearch
" endif
" 
" " Only do this part when compiled with support for autocommands.
" if has("autocmd")
" 
"   " Enable file type detection.
"   " Use the default filetype settings, so that mail gets 'tw' set to 72,
"   " 'cindent' is on in C files, etc.
"   " Also load indent files, to automatically do language-dependent indenting.
"   filetype plugin indent on
" 
"   " Put these in an autocmd group, so that we can delete them easily.
"   augroup vimrcEx
"   au!
" 
"   " For all text files set 'textwidth' to 78 characters.
"   autocmd FileType text setlocal textwidth=78
" 
"   " When editing a file, always jump to the last known cursor position.
"   " Don't do it when the position is invalid or when inside an event handler
"   " (happens when dropping a file on gvim).
"   " Also don't do it when the mark is in the first line, that is the default
"   " position when opening a file.
"   autocmd BufReadPost *
"     \ if line("'\"") > 1 && line("'\"") <= line("$") |
"     \   exe "normal! g`\"" |
"     \ endif
" 
"   augroup END
" 
" else
" 
"   set autoindent		" always set autoindenting on
" 
" endif " has("autocmd")
" 
" " Convenient command to see the difference between the current buffer and the
" " file it was loaded from, thus the changes you made.
" " Only define it when not defined already.
" if !exists(":DiffOrig")
"   command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
" 		  \ | wincmd p | diffthis
" endif
